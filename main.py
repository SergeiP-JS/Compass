#!/usr/bin/env python3
# -*- coding: utf-8 -*-

__author__ = 'SPridannikov'


import datetime as DT
import os
import time
from threading import Thread

# pip install python-telegram-bot
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Updater, MessageHandler, CommandHandler, Filters, CallbackContext
from telegram.ext.dispatcher import run_async

import db
from config import TOKEN
from common import get_logger, log_func, reply_error
from graph import create_graph
from parser_exchange_rate import parse
from run_check_subscriptions import check_


log = get_logger(__file__)


COMMAND_SUBSCRIBE = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'
COMMAND_UNSUBSCRIBE = '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'
COMMAND_LAST = '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ'
COMMAND_LAST_BY_WEEK = '–ó–∞ –Ω–µ–¥–µ–ª—é'
COMMAND_LAST_BY_MONTH = '–ó–∞ –º–µ—Å—è—Ü'


def keyboard_(is_active):
    if is_active:
        COMMANDS = [[COMMAND_LAST, COMMAND_LAST_BY_WEEK, COMMAND_LAST_BY_MONTH], [COMMAND_UNSUBSCRIBE]]
    else:
        COMMANDS = [[COMMAND_LAST, COMMAND_LAST_BY_WEEK, COMMAND_LAST_BY_MONTH], [COMMAND_SUBSCRIBE]]

    return ReplyKeyboardMarkup(COMMANDS, resize_keyboard=True)


@run_async
@log_func(log)
def on_start(update: Update, context: CallbackContext):
    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)

    update.effective_message.reply_html(
        f'–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é {update.effective_user.first_name} üôÇ\n'
        '–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–ø–æ—Å–æ–±–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å USD –≤–∞–ª—é—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ üí≤.\n'
        '–° –ø–æ–º–æ—â—å—é –º–µ–Ω—é –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –∑–∞ –¥–µ–Ω—å, –Ω–µ–¥–µ–ª—é –∏–ª–∏ –º–µ—Å—è—Ü.',
        reply_markup=keyboard_(False if not user else user.get().is_active)
    )


@run_async
@log_func(log)
def on_command_SUBSCRIBE(update: Update, context: CallbackContext):
    message = update.effective_message
    # print(message.text)

    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)

    if not user:
        db.Subscription.create(chat_id=update.effective_chat.id)
        message.text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòâ"
    else:
        if user.get().is_active:
            message.text = "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ü§î"
        else:
            db.Subscription.set_active(user.get(),True)

            message.text = "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å üòâ"

    message.reply_html(
        message.text,
        reply_markup=keyboard_(user.get().is_active)
    )


@run_async
@log_func(log)
def on_command_UNSUBSCRIBE(update: Update, context: CallbackContext):
    message = update.effective_message
    # print(message.text)

    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)

    if not user:
        message.text = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ü§î"
    else:
        if not user.get().is_active:
            message.text = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ü§î"
        else:
            db.Subscription.set_active(user.get(),False)

            message.text = "–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å üòî"

    message.reply_html(
        message.text,
        reply_markup=keyboard_(False if not user else user.get().is_active)
    )


@run_async
@log_func(log)
def on_command_LAST(update: Update, context: CallbackContext):
    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)

    if db.ExchangeRate.select().first():
        update.effective_message.reply_html(
            f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å USD –∑–∞ <b><u>{db.ExchangeRate.get_last().date}</u></b>: '
            f'{db.ExchangeRate.get_last().value}‚ÇΩ',
            reply_markup=keyboard_(False if not user else user.get().is_active)
        )
    else:
        update.effective_message.reply_html(
            '–ë–æ—Ç –µ—â—ë –º–æ–ª–æ–¥–æ–π –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî',
            reply_markup=keyboard_(False if not user else user.get().is_active)
        )


@run_async
@log_func(log)
def on_command_LAST_BY_WEEK(update: Update, context: CallbackContext):
    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)
    days=7

    items = [x.value for x in db.ExchangeRate.get_last_by(days=days)]
    if len(items)==days:
        context.bot.send_photo(update.effective_chat.id, open(f'img/graph_{days}.png', 'rb'))
        update.effective_message.reply_html(
            f'–°—Ä–µ–¥–Ω–µ–µ USD –∑–∞ <b><u>–Ω–µ–¥–µ–ª—é</u></b>: {float(sum(items)) / max(len(items), 1)}‚ÇΩ',
            reply_markup=keyboard_(False if not user else user.get().is_active)
        )
    else:
        update.effective_message.reply_html(
            '–ë–æ—Ç –µ—â—ë –º–æ–ª–æ–¥–æ–π –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî',
            reply_markup=keyboard_(False if not user else user.get().is_active)
        )


@run_async
@log_func(log)
def on_command_LAST_BY_MONTH(update: Update, context: CallbackContext):
    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)
    days=30

    items = [x.value for x in db.ExchangeRate.get_last_by(days=days)]
    if len(items)==days:
        context.bot.send_photo(update.effective_chat.id, open(f'img/graph_{days}.png', 'rb'))
        update.effective_message.reply_html(
            f'–°—Ä–µ–¥–Ω–µ–µ USD –∑–∞ <b><u>–º–µ—Å—è—Ü</u></b>: {float(sum(items)) / max(len(items), 1)}‚ÇΩ',
            reply_markup=keyboard_(False if not user else user.get().is_active)
        )
    else:
        update.effective_message.reply_html(
            '–ë–æ—Ç –µ—â—ë –º–æ–ª–æ–¥–æ–π –∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üòî',
            reply_markup=keyboard_(False if not user else user.get().is_active)
        )


@run_async
@log_func(log)
def on_request(update: Update, context: CallbackContext):
    user = db.Subscription.select().where(db.Subscription.chat_id == update.effective_chat.id)

    update.effective_message.reply_html(
        '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ü§î',
        reply_markup=keyboard_(False if not user else user.get().is_active)
    )


def on_error(update: Update, context: CallbackContext):
    reply_error(log, update, context)


def main():
    cpu_count = os.cpu_count()
    workers = cpu_count
    log.debug('System: CPU_COUNT=%s, WORKERS=%s', cpu_count, workers)

    log.debug('Start')

    updater = Updater(
        TOKEN,
        workers=workers,
        use_context=True
    )

    Thread(target=check_,args=(updater,)).start()

    dp = updater.dispatcher

    # –ö–Ω–æ–ø–∫–∏
    dp.add_handler(CommandHandler('start', on_start))

    dp.add_handler(MessageHandler(Filters.text(COMMAND_SUBSCRIBE), on_command_SUBSCRIBE))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_UNSUBSCRIBE), on_command_UNSUBSCRIBE))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_LAST), on_command_LAST))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_LAST_BY_WEEK), on_command_LAST_BY_WEEK))
    dp.add_handler(MessageHandler(Filters.text(COMMAND_LAST_BY_MONTH), on_command_LAST_BY_MONTH))
    dp.add_handler(MessageHandler(Filters.text, on_request))

    dp.add_error_handler(on_error)

    updater.start_polling()
    updater.idle()

    log.debug('Finish')


def parse_():
    while True:
        parse()

        items = [x.value for x in db.ExchangeRate.get_last_by(days=7)]
        if len(items) == 7:
            create_graph(7,items)

        items = [x.value for x in db.ExchangeRate.get_last_by(days=30)]
        if len(items) == 30:
            create_graph(30, items)

        time.sleep(8*3600)


if __name__ == '__main__':
     # asyncio.run(async_())
     Thread(target=parse_).start()
     #
     while True:
         try:
             main()
         except:
             log.exception('')
             timeout = 15
             log.info(f'Restarting the bot after {timeout} seconds')
             time.sleep(timeout)

